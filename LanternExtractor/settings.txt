# Lantern Extractor Settings

# EverQuest Installation Path
# Windows example: C:/EverQuest
# MacOS example: /Users/your.name/EQ/
EverQuestDirectory = C:/Program Files (x86)/EverQuest/

# Server Database Path (optional)
# This can be found in your LanternEQ install (NOT the extractor) -
ServerDatabasePath = C:/Lantern/LanternEQ_Data/StreamingAssets/Database/lantern_server.db

# Extract the contents of the S3D archive as is?
# If true, this will export all contents as they exist in the archives in their original formats.
# If false, this will extract contents, process WLD files and convert images to PNG.
RawS3DExtract = false

# Sets the desired export format for models
# 0 = Intermediate (Unity importer), 1 = OBJ, 2 = glTF
ModelExportFormat = 2

# Extract the zone mesh with groups?
# The zone model is made up of smaller BSP region meshes.
# If enabled, each region mesh is exported.
# If disabled, the mesh is combined into a single mesh.
# Unity importer only supports single mesh zone.
# (Intermediate, OBJ)
ExportZoneMeshGroups = false

# glTF will export empty meshes with metadata of the region information
# (glTF)
ExportZoneRegions = false

# Include hidden geometry (invisible boundaries) in the zone collision export?
# (Intermediate, OBJ)
ExportHiddenGeometry = false

# If true, will export all characters to the 'characters' folder
# This is useful when batch importing into Unity
# (Intermediate)
ExportCharacterToSingleFolder = false

# If true, will export all equipment to the 'equipment' folder
# This is useful when batch importing into Unity
# (Intermediate)
ExportEquipmentToSingleFolder = true

# If true, will export all sounds to the 'sounds' folder
# Some sounds with conflicting names will be overwritten
ExportSoundsToSingleFolder = true

# If true and using OBJ export format, this will dump an OBJ for each animation frame.
# This could use a high amount of disk space.
# If true and using glTF export format, skeletal models will export with animations.
# (OBJ, glTF)
ExportAllAnimationFrames = false

# If true, will export zone files with their associated objects placed within the zone
# (OBJ, glTF)
ExportZoneWithObjects = false

# If true, will export zone files with their associated "door" objects placed within the zone
# Requires database connection
# (glTF)
ExportZoneWithDoors = false

# If true, will export every character variation that can spawn in the zone
# Requires database connection
# (glTF)
ExportZoneCharacterVariations = false

# If > 0.0, will export light instances in the exported zone. Uses KHR_lights_punctual extension.
# Lights get exported with type = point. 
# Intensity property is EQ client's LightInstance.Radius * LightIntensityMultiplier.
# The number of lights in a zone can range into the hundreds, and renderers I've tried will have
# issues if there are too many. Some fail to load correctly (three.js) or only render a subset 
# of the lights (babylon.js). However, they do import into Blender.
# Because the handling of light rendering seems to vary depending on the consumer, I've left this
# intensity multiplier configurable. If importing into Blender, I've found the
# value 54.35 roughly translates EQ's radius values to Blender's Power (watts).
# 1.0 seems to work well for others.
# (glTF)
LightIntensityMultiplier = 0.0

# !!EXPIRIMENTAL!! Export zone objects with skeletal animations
# If ExportZoneWithObjects is true and this is also true, objects with
# skeletal animations will have them included with the zone glTF export. Unfortunately,
# glTF does not support a way to have one armature and animation shared among more than one instance
# of a mesh. So every instance of a skeletal object gets its own armature and animations attached.
# Outdoor zones in Kunark and Velious have hundreds of trees with skeletal animations. Exporting
# those zones with this turned on will take a long time to process and will create extremely large
# files that will be incredibly taxing for model viewers to import/load/render.
# (glTF)
ExportZoneObjectsWithSkeletalAnimations = false

# Scale for exporting zone for glTF export
# (glTF)
ExportZoneScale = 0.2

# Export vertex colors
# Default behavior of glTF renderers is to mix the vertex color with the base color,
# which will not look right. Only turn this on if you intend to do some post-processing that
# requires vertex colors being present.
# (glTF)
ExportGltfVertexColors = false

# Export glTF models in .GLB file format.
# GLB packages the .glTF json, the associated .bin, and all of the model's texture images
# into one file. This will take up more space since textures can't be shared, and the export
# process will likely take longer to complete. However, using GLB will make models more portable.
# (glTF)
ExportGltfInGlbFormat = false

# Separate two-faced triangles
# Some meshes have a pattern where three vertices are shared by two triangles with different
# winding orders. The glTF format itself is fine with this and it usually displays as
# expected with most renderers. However, Blender has a limitation where three vertices can
# only have one face. If this option is turned on, a second set of vertices will be created
# for any triangles found sharing vertices with another.
# (glTF)
SeparateTwoFacedTriangles = false

# Exported animation types
# Animations are prefixed with a single letter to designate what type they are:
# p = Passive, o = Idle, l = Locomotion, c = Combat, d = Damage, t = Spell/Instrument, s = Social
# Character model exports will only include the animations prefixed in this
# comma delimited string. For example, if set to "o,c" only Idle and Combat animation
# types will be exported.
# (OBJ, glTF)
ExportedAnimationTypes = p,o,l,c,d,t,s

# Additional files that should be copied when extracting with `all` or `clientdata`
# Files should be comma separated and relative to `EverQuestDirectory`.
# (Intermediate)
ClientDataToCopy = spells.eff,spdat.eff

# If enabled, client XMI files will be copied to the 'Exports/Music' folder
# XMI files can be used in the Lantern client
CopyMusic = true

# The minimum verbosity of the logger
# 0 = info, 1 = warnings, 2 = errors
LoggerVerbosity = 2